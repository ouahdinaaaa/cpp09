#include <iostream>
#include <vector>

// Fonction pour trier les éléments d'une liste X
std::vector<int> TriSpecial(std::vector<int>& X) {
    int n = X.size();

    // Cas de base : si la taille de la liste est 1, retourne la liste
    if (n == 1) {
        return X;
    }

    // Calcule la moitié de la liste
    int m = n / 2;

    // Création de paires d'éléments
    std::vector<std::pair<int, int>> pairs;
    for (int i = 0; i < m; ++i) {
        pairs.push_back(std::make_pair(X[2 * i], X[2 * i + 1]));
    }

    // Variable pour stocker les éléments plus grands dans chaque paire
    std::vector<int> ElementsPlusGrand;
    for (const auto& pair : pairs) {
        if (pair.first > pair.second) {
            ElementsPlusGrand.push_back(pair.first);
        } else {
            ElementsPlusGrand.push_back(pair.second);
        }
    }

    // Appel récursif de TriSpecial avec ElementsPlusGrand
    ElementsPlusGrand = TriSpecial(ElementsPlusGrand);

    // Fusion des résultats de la récursion avec les éléments restants
    std::vector<int> resultat;
    int idx = 0;
    for (int i = 0; i < m; ++i) {
        if (pairs[i].first <= pairs[i].second) {
            resultat.push_back(pairs[i].first);
            resultat.insert(resultat.end(), ElementsPlusGrand.begin() + idx, ElementsPlusGrand.end());
            idx = ElementsPlusGrand.size();
            break;
        }
    }

    // Recherche binaire pour insérer dans l'ordre les éléments restants
    for (int i = idx; i < ElementsPlusGrand.size(); ++i) {
        auto it = std::lower_bound(resultat.begin(), resultat.end(), ElementsPlusGrand[i]);
        resultat.insert(it, ElementsPlusGrand[i]);
    }

    return resultat;
}

int main() {
    std::vector<int> X = {3, 1, 4, 2};

    std::vector<int> sortedX = TriSpecial(X);

    // Affichage des éléments triés
    std::cout << "Liste triee : ";
    for (int num : sortedX) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
